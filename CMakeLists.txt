#cmake_minimum_required (VERSION 3.0.2)
cmake_minimum_required (VERSION 2.8.0)

project (FlatCC)

#
# NOTE: when changing build options, clean the build using:
#
#   scripts/cleanall.sh
#


# Affects the flatbuffer verify operation. Normally a verify should just
# quickly reject invalid buffers but for troubleshooting, assertions can
# enabled. This requires rebuilding the runtime library and will likely
# break test cases (those that tests that an invalid buffer is invalid).
option (FLATCC_DEBUG_VERIFY
    "assert on verify failure in runtime lib" OFF)

# During development it may not be possible to compile with reflection
# enabled because it depends and code generated by the code being built.
# Normally pregenerated code is included, but it will not work during
# breaking changes. This option can disable the self-referential
# feature.
option (FLATCC_REFLECTION
    "generation of binary flatbuffer schema files" ON)

# FLATCC_NATIVE_OPTIM and FLATCC_FAST_DOUBLE affects json parsing,
# especially if the content is pretty printed. But it is plenty
# fast without these settings in most cases.

option (FLATCC_NATIVE_OPTIM
    "use machine native optimizations like SSE 4.2" OFF)

option (FLATCC_FAST_DOUBLE
    "faster but slightly incorrect floating point parser (json)" OFF)


if (FLATCC_DEBUG_VERIFY)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DFLATCC_DEBUG_VERIFY=1")
endif()

if (FLATCC_REFLECTION)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DFLATCC_REFLECTION=1")
    file(WRITE ${PROJECT_SOURCE_DIR}/build/reflection_enabled "REFLECTION=1")
    file(REMOVE ${PROJECT_SOURCE_DIR}/build/reflection_disabled)
else()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DFLATCC_REFLECTION=0")
    file(REMOVE ${PROJECT_SOURCE_DIR}/build/reflection_enabled)
    file(WRITE ${PROJECT_SOURCE_DIR}/build/reflection_disabled "REFLECTION=0")
endif()

if (FLATCC_NATIVE_OPTIM)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native -DFLATCC_USE_SSE4_2=1")
endif()

if (FLATCC_FAST_DOUBLE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DGRISU3_PARSE_ALLOW_ERROR -DFLATCC_USE_GRISU3=1")
endif()


# The folder of this directory, as apposed to CMAKE_BINARY_DIR
# which would usually be the build/Release and build/Debug paths
set (dist_dir "${PROJECT_SOURCE_DIR}")
# set (dist_dir "${CMAKE_BINARY_DIR}")

# The targets we copy to bin and lib directories, i.e. not tests.
set(dist_targets
    flatcc
    flatccrt
    flatcc_cli
)

# Note: for compiling generated C code, warnings of unused functions
# and constants should be turned off - those are plentiful. They are
# silenced for Clang automaitically.

# -DFLATCC_PORTABLE can help with stdint.h and implementing endian
# swapping in generated code. Most most recent systems should compile
# without C11 and without -DFLATCC_PORTABLE

# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -DFLATCC_PORTABLE")

# Note:GNUC -pendantic without -std=c11 yields many warnings we don't care about.
# Clang is fine.
# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11 -Wall -pedantic -Wextra")

if (MSVC)
    # We may have to up warning level again, but MSVC warns on fopen, so...
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -W2 -DFLATCC_PORTABLE")
else()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
endif()
# As of gcc 4.8 it is not possible to suppress this warning using 
# #pragma GCC diagnostic ignored "-Wunused-function"
if(CMAKE_COMPILER_IS_GNUCC)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-function")
endif()

# To get assembly output
# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -save-temps")


# If enabled the runtime librarys verifier will print an error message
# before asserting on error, otherwise it will just return an error code
# like release builds.
#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DFLATCC_DEBUG_VERIFY")

set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

set(CMAKE_DEBUG_POSTFIX "_d")

if (CMAKE_BUILD_TYPE MATCHES "Debug")
    set(CMAKE_EXECUTABLE_SUFFIX "_d${CMAKE_EXECUTABLE_SUFFIX}")
endif()

# Note: test cases (except test_cgen) are not built here. They run by
# bash script each time the test fires and triggers thsi build as well.
# These scripts respect the CC env. variable.

add_subdirectory(test)
add_subdirectory(src/compiler)
add_subdirectory(src/runtime)
add_subdirectory(src/cli)

set_target_properties(${dist_targets}
    PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${dist_dir}/lib"
    LIBRARY_OUTPUT_DIRECTORY "${dist_dir}/lib"
    RUNTIME_OUTPUT_DIRECTORY "${dist_dir}/bin"
)
